{"version":3,"sources":["utils/duration/index.js","Focus/FocusDuration.js","Break/BreakDuration.js","Progress/Progress.js","TimeLeft/TimeLeft.js","utils/class-names/index.js","pomodoro/Pomodoro.js","utils/useInterval/index.js","App.js","index.js"],"names":["minutesToDuration","givenMinutes","minutes","Math","floor","toString","padStart","secondsToDuration","givenSeconds","seconds","round","FocusDurationChange","isTimerRunning","focusDuration","setDuration","pause","handleClickIncrease","target","prevDuration","handleClickDecrease","className","data-testid","disabled","onClick","type","BreakDurationChange","breakDuration","setBreakDuration","handleClickBreakIncrease","handleClickBreakDecrease","Progress","timeRemaining","toFocus","toBreak","elapsedTime","stop","progress","style","height","role","aria-valuemin","aria-valuemax","aria-valuenow","width","TimeLeft","classNameToBoolean","playPause","stopTimer","aria-label","title","oi","Object","entries","reduce","classes","value","concat","undefined","filter","join","Pomodoro","useState","setIsTimerRunning","setTimeRemaining","setToFocus","setToBreak","setElapsedTime","setPause","setStop","currentTime","prevState","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","music","Audio","process","play","setTimeout","FocusDuration","BreakDuration","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.615b0c5a.chunk.js","sourcesContent":["/**\n * Formats a number of minutes as 'mm:00'.\n *\n * For example,\n *    minutesToDuration(3) = '03:00'\n *    minutesToDuration(45) = '45:00'\n *\n * @param givenMinutes\n *    the number of minutes in the duration\n * @returns {string}\n *    the given minutes formatted as 'mm:00'\n */\n\nexport function minutesToDuration(givenMinutes) {\n  const minutes = Math.floor(givenMinutes).toString().padStart(2, \"0\");\n  return `${minutes}:00`;\n}\n\n/**\n * Formats a number of seconds as 'mm:ss'.\n *\n * For example,\n *    secondsToDuration(305) = '05:05'\n *    secondsToDuration(930) = '15:30'\n *\n * @param givenSeconds\n *    the number of seconds in the duration\n * @returns {string}\n *    the given seconds formatted as 'mm:ss'\n */\n\nexport function secondsToDuration(givenSeconds) {\n  const minutes = Math.floor((givenSeconds % 3600) / 60)\n    .toString()\n    .padStart(2, \"0\");\n  const seconds = Math.round(givenSeconds % 60)\n    .toString()\n    .padStart(2, \"0\");\n  return `${minutes}:${seconds}`;\n}\n","import React from \"react\";\r\nimport { minutesToDuration } from \"../utils/duration\";\r\n\r\nfunction FocusDurationChange({ isTimerRunning, focusDuration, setDuration, pause }) {\r\n  // Increase duration by 5 mins for every click\r\n  const handleClickIncrease = ({ target }) => {\r\n    setDuration((prevDuration) => {\r\n      return (prevDuration += 5);\r\n    });\r\n  };\r\n// Decrease duration by 5 with every click\r\n  const handleClickDecrease = ({ target }) => {\r\n    setDuration((prevDuration) => {\r\n      return (prevDuration -= 5);\r\n    });\r\n  };\r\n  return (\r\n    <div className=\"col\">\r\n      <div className=\"input-group input-group-lg mb-2\">\r\n        <span className=\"input-group-text\" data-testid=\"duration-focus\">\r\n          {/* TODO: Update this text to display the current focus session duration */}\r\n          Focus Duration: {minutesToDuration(focusDuration)}\r\n        </span>\r\n        <div className=\"input-group-append\">\r\n          {/* TODO: Implement decreasing focus duration and disable during a focus or break session */}\r\n          {focusDuration <= 5 || isTimerRunning === true || pause === true ? (\r\n            <button\r\n              // If any of these conditions are met, disable this button\r\n              disabled={true}\r\n              onClick={handleClickDecrease}\r\n              type=\"button\"\r\n              className=\"btn btn-secondary\"\r\n              data-testid=\"decrease-focus\"\r\n            >\r\n              <span className=\"oi oi-minus\" />\r\n            </button>\r\n          ) : (\r\n            <button\r\n              disabled={false}\r\n              onClick={handleClickDecrease}\r\n              type=\"button\"\r\n              className=\"btn btn-secondary\"\r\n              data-testid=\"decrease-focus\"\r\n            >\r\n              <span className=\"oi oi-minus\" />\r\n            </button>\r\n          )}\r\n\r\n          {/* TODO: Implement increasing focus duration  and disable during a focus or break session */}\r\n          {focusDuration >= 60 || isTimerRunning === true || pause === true ? (\r\n            <button\r\n              disabled={true}\r\n              onClick={handleClickIncrease}\r\n              type=\"button\"\r\n              className=\"btn btn-secondary\"\r\n              data-testid=\"increase-focus\"\r\n            >\r\n              <span className=\"oi oi-plus\" />\r\n            </button>\r\n          ) : (\r\n            <button\r\n              disabled={false}\r\n              onClick={handleClickIncrease}\r\n              type=\"button\"\r\n              className=\"btn btn-secondary\"\r\n              data-testid=\"increase-focus\"\r\n            >\r\n              <span className=\"oi oi-plus\" />\r\n            </button>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FocusDurationChange;\r\n\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\nimport { secondsToDuration } from \"../utils/duration\";\n\nfunction BreakDurationChange({isTimerRunning, breakDuration, setBreakDuration, pause}) {\n  // Break duration starts out at 1:00\n  \n  // On click increase break duration by one minute\n  const handleClickBreakIncrease = ({ target }) => {\n    setBreakDuration((prevDuration) => {\n      return (prevDuration += 60);\n    });\n  };\n  // On click decrease break duration by one minute\n  const handleClickBreakDecrease = ({ target }) => {\n    setBreakDuration((prevDuration) => {\n      return (prevDuration -= 60);\n    });\n  };\n  return (\n    <div className=\"col\">\n      <div className=\"float-right\">\n        <div className=\"input-group input-group-lg mb-2\">\n          <span className=\"input-group-text\" data-testid=\"duration-break\">\n            {/* TODO: Update this text to display the current break session duration */}\n            Break Duration: {secondsToDuration(breakDuration)}\n          </span>\n          <div className=\"input-group-append\">\n            {/* TODO: Implement decreasing break duration and disable during a focus or break session*/}\n            {breakDuration <= 60 || isTimerRunning === true || pause === true ? (\n              <button\n                disabled={true}\n                type=\"button\"\n                className=\"btn btn-secondary\"\n                data-testid=\"decrease-break\"\n                onClick={handleClickBreakDecrease}\n              >\n                <span className=\"oi oi-minus\" />\n              </button>\n            ) : (\n              <button\n                disabled={false}\n                type=\"button\"\n                className=\"btn btn-secondary\"\n                data-testid=\"decrease-break\"\n                onClick={handleClickBreakDecrease}\n              >\n                <span className=\"oi oi-minus\" />\n              </button>\n            )}\n            {breakDuration >= 900 || isTimerRunning === true || pause === true ? (\n              <button\n                disabled={true}\n                type=\"button\"\n                className=\"btn btn-secondary\"\n                data-testid=\"increase-break\"\n                onClick={handleClickBreakIncrease}\n              >\n                <span className=\"oi oi-plus\" />\n              </button>\n            ) : (\n              <button\n                disabled={false}\n                type=\"button\"\n                className=\"btn btn-secondary\"\n                data-testid=\"increase-break\"\n                onClick={handleClickBreakIncrease}\n              >\n                <span className=\"oi oi-plus\" />\n              </button>\n            )}\n\n            {/* TODO: Implement increasing break duration and disable during a focus or break session*/}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default BreakDurationChange;","import React from \"react\";\r\nimport { secondsToDuration, minutesToDuration } from \"../utils/duration\";\r\n\r\n\r\nfunction Progress({\r\n  isTimerRunning,\r\n  focusDuration,\r\n  timeRemaining,\r\n  toFocus,\r\n  breakDuration,\r\n  toBreak,\r\n  elapsedTime,\r\n  pause,\r\n  stop,\r\n  progress\r\n}) {\r\n\r\n  if (toFocus === true && isTimerRunning) {\r\n    return (\r\n      <>\r\n        <div className=\"row mb-2\">\r\n          <div className=\"col\">\r\n            {/* TODO: Update message below to include current session (Focusing or On Break) and total duration */}\r\n            <h2 data-testid=\"session-title\">\r\n              Focusing for {minutesToDuration(focusDuration)} minutes\r\n            </h2>\r\n            {/* TODO: Update message below to include time remaining in the current session */}\r\n            <p className=\"lead\" data-testid=\"session-sub-title\">\r\n              {secondsToDuration(timeRemaining)} remaining\r\n            </p>\r\n          </div>\r\n        </div>\r\n        <div className=\"row mb-2\">\r\n          <div className=\"col\">\r\n            <div className=\"progress\" style={{ height: \"20px\" }}>\r\n              <div\r\n                className=\"progress-bar\"\r\n                role=\"progressbar\"\r\n                aria-valuemin=\"0\"\r\n                aria-valuemax=\"100\"\r\n                aria-valuenow={elapsedTime} // TODO: Increase aria-valuenow as elapsed time increases\r\n                style={{ width: `${elapsedTime}%` }} // TODO: Increase width % as elapsed time increases\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  } else if (toBreak === true && isTimerRunning) {\r\n    return (\r\n      <>\r\n        <div className=\"row mb-2\">\r\n          <div className=\"col\">\r\n            {/* TODO: Update message below to include current session (Focusing or On Break) and total duration */}\r\n            <h2 data-testid=\"session-title\">\r\n              On Break for {secondsToDuration(breakDuration)} minutes\r\n            </h2>\r\n            {/* TODO: Update message below to include time remaining in the current session */}\r\n            <p className=\"lead\" data-testid=\"session-sub-title\">\r\n              {secondsToDuration(timeRemaining)} remaining\r\n            </p>\r\n          </div>\r\n        </div>\r\n        <div className=\"row mb-2\">\r\n          <div className=\"col\">\r\n            <div className=\"progress\" style={{ height: \"20px\" }}>\r\n              <div\r\n                className=\"progress-bar\"\r\n                role=\"progressbar\"\r\n                aria-valuemin=\"0\"\r\n                aria-valuemax=\"100\"\r\n                aria-valuenow={elapsedTime} // TODO: Increase aria-valuenow as elapsed time increases\r\n                style={{ width: `${elapsedTime}%` }} // TODO: Increase width % as elapsed time increases\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  } else if (pause === true && !isTimerRunning) {\r\n    return (\r\n      <>\r\n        <div className=\"row mb-2\">\r\n          <div className=\"col\">\r\n            {/* TODO: Update message below to include current session (Focusing or On Break) and total duration */}\r\n            <h2 data-testid=\"session-title\">\r\n              {toFocus === true\r\n                ? `Focusing for ${minutesToDuration(focusDuration)} minutes`\r\n                : `On Break for ${secondsToDuration(breakDuration)} minutes`}\r\n            </h2>\r\n            {/* TODO: Update message below to include time remaining in the current session */}\r\n            <p className=\"lead\" data-testid=\"session-sub-title\">\r\n              {secondsToDuration(timeRemaining)} remaining\r\n            </p>\r\n            <h3>PAUSED</h3>\r\n          </div>\r\n        </div>\r\n        <div className=\"row mb-2\">\r\n          <div className=\"col\">\r\n            <div className=\"progress\" style={{ height: \"20px\" }}>\r\n              <div\r\n                className=\"progress-bar\"\r\n                role=\"progressbar\"\r\n                aria-valuemin=\"0\"\r\n                aria-valuemax=\"100\"\r\n                aria-valuenow={elapsedTime} // TODO: Increase aria-valuenow as elapsed time increases\r\n                style={{ width: `${elapsedTime}%` }} // TODO: Increase width % as elapsed time increases\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  } else if (stop === true) {\r\n    return null;\r\n  }\r\n  return null;\r\n}\r\nexport default Progress;\r\n","import React from \"react\";\r\nimport classNames from \"../utils/class-names\";\r\n\r\n\r\nfunction TimeLeft({\r\n  isTimerRunning,\r\n  playPause,\r\n  stopTimer,\r\n}) {\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col\">\r\n        <div\r\n          className=\"btn-group btn-group-lg mb-2\"\r\n          role=\"group\"\r\n          aria-label=\"Timer controls\"\r\n        >\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-primary\"\r\n            data-testid=\"play-pause\"\r\n            title=\"Start or pause timer\"\r\n            onClick={playPause}\r\n          >\r\n            <span\r\n              className={classNames({\r\n                oi: true,\r\n                \"oi-media-play\": !isTimerRunning,\r\n                \"oi-media-pause\": isTimerRunning,\r\n              })}\r\n            />\r\n          </button>\r\n          {/* TODO: Implement stopping the current focus or break session and disable when there is no active session */}\r\n          {isTimerRunning === false ? (\r\n            <button\r\n              disabled={true}\r\n              type=\"button\"\r\n              className=\"btn btn-secondary\"\r\n              title=\"Stop the session\"\r\n            >\r\n              <span className=\"oi oi-media-stop\" />\r\n            </button>\r\n          ) : (\r\n            <button\r\n              disabled={false}\r\n              type=\"button\"\r\n              className=\"btn btn-secondary\"\r\n              title=\"Stop the session\"\r\n              onClick={stopTimer}\r\n            >\r\n              <span className=\"oi oi-media-stop\" />\r\n            </button>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TimeLeft;","/**\n * Use this function to dynamically assign the className property of react components.\n *\n * Usage:\n *\n *  <span className={classNames({\n *               \"oi\": true,\n *               \"oi-media-play\": currentState.isPaused,\n *               'oi-media-pause': !currentState.isPaused\n *             })}/>\n *\n *   if currentState.isPaused === true, the className will be \"oi oi-media-play\" otherwise it will be \"oi oi-media-pause\"\n *\n * @param classNameToBoolean\n *    a map of a class name to a boolean value. If the boolean value is `true`, the class name is included, otherwise it is excluded.\n * @returns {string}\n *    a space delimited string of the class names which have a value of `true`.\n */\nexport default function classNames(classNameToBoolean) {\n  return Object.entries(classNameToBoolean)\n    .reduce(\n      (classes, [className, value]) =>\n        classes.concat(value ? className : undefined),\n      []\n    )\n    .filter((className) => className !== undefined)\n    .join(\" \");\n}\n","import React, { useState } from \"react\";\r\nimport useInterval from \"../utils/useInterval\";\r\nimport FocusDurationChange from \"../Focus/FocusDuration\";\r\nimport BreakDurationChange from \"../Break/BreakDuration\";\r\nimport Progress from \"../Progress/Progress\";\r\nimport TimeLeft from \"../TimeLeft/TimeLeft\";\r\nfunction Pomodoro() {\r\n  // Timer starts out paused\r\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\r\n  // Focus duration starts out as 1 minute\r\n  const [focusDuration, setDuration] = useState(25);\r\n  // Time remaining is initially null\r\n  const [timeRemaining, setTimeRemaining] = useState(null);\r\n  // toFocus starts off false\r\n  const [toFocus, setToFocus] = useState(null);\r\n  // Break duration starts out at 60 seconds\r\n  const [breakDuration, setBreakDuration] = useState(300);\r\n  // toBreak starts off false\r\n  const [toBreak, setToBreak] = useState(false);\r\n  // elapsedTime represents progress bar completion\r\n  const [elapsedTime, setElapsedTime] = useState(0);\r\n  // pause starts off as false\r\n  const [pause, setPause] = useState(false);\r\n  // stop starts off as false\r\n  const [stop, setStop] = useState(false);\r\n  // Assign timeRemaining to its own variable\r\n  \r\n  let currentTime = timeRemaining;\r\n  useInterval(\r\n    () => {\r\n      let timeElapsed = 1;\r\n      // Time remaining is subtracted by 1 every second\r\n      setTimeRemaining(() => {\r\n        return currentTime - timeElapsed;\r\n      });\r\n\r\n      // If time remaining reaches 0, stop timer & play music\r\n      // Wait 3 seconds and then pause the music, start Timer again,\r\n      if (timeRemaining <= 0) {\r\n        setIsTimerRunning(false);\r\n        const music = new Audio(`${process.env.PUBLIC_URL}/alarm/alarm.wav`);\r\n        music.play();\r\n        setTimeout(function () {\r\n          music.pause();\r\n          //playPause();\r\n          setIsTimerRunning((prevState) => !prevState);\r\n          // Change state of Focus and Break to opposite (T/F)\r\n          setToFocus((prevState) => !prevState);\r\n\r\n          setToBreak((prevState) => !prevState);\r\n\r\n          \r\n          toFocus === true\r\n            ? setTimeRemaining(breakDuration)\r\n            : setTimeRemaining(focusDuration * 60);\r\n        }, 3000);\r\n      }\r\n      if (toFocus === true) {\r\n        setElapsedTime((prevState) => {\r\n          return (prevState += 100 / (focusDuration * 60));\r\n        });\r\n      } else if (toBreak === true) {\r\n        setElapsedTime((prevState) => {\r\n          return (prevState += 100 / breakDuration);\r\n        });\r\n      }\r\n     if (elapsedTime >= 99) {\r\n       setElapsedTime((prevState) => {\r\n            return (prevState = 0);\r\n          });\r\n     }\r\n    },\r\n    isTimerRunning ? 1000 : null\r\n  );\r\n\r\n  // This function is called whenever the play/pause button is clicked\r\n  function playPause() {\r\n    // Changes timer to opposite state (T/F)\r\n    setIsTimerRunning((prevState) => !prevState);\r\n\r\n    // If currentTime variable is null set it to focusDuration * 60 (first click)\r\n    if (currentTime === null) {\r\n      setTimeRemaining(focusDuration * 60);\r\n    } else {\r\n      // set Time remaining to whatever current time remaining is\r\n      setTimeRemaining(currentTime);\r\n    }\r\n\r\n    // If when clicked toFocus or toBreak is true, keep the states as true\r\n    if (toFocus === true) {\r\n      setToFocus(true);\r\n    } else if (toBreak === true) {\r\n      setToBreak(true);\r\n    } else if (toFocus === null) {\r\n      setToFocus(true);\r\n    }\r\n    // If button is clicked and timer is running\r\n    if (isTimerRunning) {\r\n      // set pause to true\r\n      setPause(true);\r\n      // stop timer\r\n      setIsTimerRunning(false);\r\n      // set time remaining to current time\r\n      setTimeRemaining(currentTime);\r\n    }\r\n    if (pause === true) {\r\n      setPause(false);\r\n    }\r\n  }\r\n  function stopTimer() {\r\n    setPause(false);\r\n    setStop(true);\r\n    setTimeRemaining(null);\r\n    setElapsedTime(0);\r\n    setDuration(25);\r\n    setBreakDuration(300);\r\n    setIsTimerRunning(false);\r\n  }\r\n\r\n  return (\r\n    <div className=\"pomodoro\">\r\n      <div className=\"row\">\r\n        <FocusDurationChange\r\n          isTimerRunning={isTimerRunning}\r\n          focusDuration={focusDuration}\r\n          setDuration={setDuration}\r\n          pause={pause}\r\n        />\r\n        <BreakDurationChange\r\n          isTimerRunning={isTimerRunning}\r\n          breakDuration={breakDuration}\r\n          setBreakDuration={setBreakDuration}\r\n          pause={pause}\r\n        />\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col\">\r\n          <TimeLeft\r\n            isTimerRunning={isTimerRunning}\r\n            toFocus={toFocus}\r\n            playPause={playPause}\r\n            focusDuration={focusDuration}\r\n            breakDuration={breakDuration}\r\n            timeRemaining={timeRemaining}\r\n            setToFocus={setToFocus}\r\n            toBreak={toBreak}\r\n            setToBreak={setToBreak}\r\n            elapsedTime={elapsedTime}\r\n            stopTimer={stopTimer}\r\n          />\r\n          <Progress\r\n            isTimerRunning={isTimerRunning}\r\n            toFocus={toFocus}\r\n            playPause={playPause}\r\n            focusDuration={focusDuration}\r\n            breakDuration={breakDuration}\r\n            timeRemaining={timeRemaining}\r\n            setToFocus={setToFocus}\r\n            toBreak={toBreak}\r\n            setToBreak={setToBreak}\r\n            elapsedTime={elapsedTime}\r\n            setElapsedTime={setElapsedTime}\r\n            pause={pause}\r\n            stop={stop}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Pomodoro;","// This custom hook is from: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n\nimport { useEffect, useRef } from \"react\";\n\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Pomodoro from \"./pomodoro/Pomodoro\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header container\">\n        <h1>Pomodoro Timer</h1>\n      </header>\n      <div className=\"container\">\n        <Pomodoro />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}